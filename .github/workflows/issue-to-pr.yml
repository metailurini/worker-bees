# This code is inspired by the GitHub repository 'aider-github-workflows' by mirrajabi.
# Reference: https://github.com/mirrajabi/aider-github-workflows

name: Issue to PR workflow
on:
  workflow_call:
    inputs:
      base_branch:
        description: 'Base branch to create PR against'
        required: true
        type: string
      chat_timeout:
        description: 'Timeout for chat in minutes to prevent burning your credits'
        required: false
        type: number
        default: 10
      issue_number:
        description: 'Issue number'
        required: true
        type: number
      model:
        description: 'Model to use'
        required: false
        type: string
        default: 'gemini/gemini-2.5-flash-preview-04-17'
      weak_model:
        description: 'Weak model to use for planning phase'
        required: false
        type: string
        default: 'gemini/gemini-2.5-flash-lite-preview-06-17'
      api_key_env_name:
        description: 'Name of the environment variable for the API key'
        required: true
        type: string
      git_user_name:
        description: 'Git user name for commits'
        required: false
        type: string
        default: 'github-actions[bot]'
      git_user_email:
        description: 'Git user email for commits'
        required: false
        type: string
        default: '41898282+github-actions[bot]@users.noreply.github.com'
    secrets:
      api_key_env_value:
        description: 'API key value for the specified provider'
        required: true
      custom_github_token:
        description: 'GitHub token to use for API calls'
        required: true

jobs:
  create-pull-request:
    permissions:
      issues: write
      pull-requests: write
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.base_branch }}

      - name: Comment on Issue Start
        uses: actions/github-script@v7
        id: comment_start
        with:
          github-token: ${{ secrets.custom_github_token }}
          script: |
            const issueNumber = ${{ inputs.issue_number }};
            const { repo, owner } = context.repo;
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: issueNumber,
              body: `The Worker Bee's currently working on this issue: [${context.runId}](${runUrl})`
            });
            console.log(`Commented on issue #${issueNumber} about workflow start.`);

      - name: Create a new branch
        uses: actions/github-script@v7
        id: create_branch
        with:
          github-token: ${{ secrets.custom_github_token }}
          script: |
            const kebabCase = (str) => str.toLowerCase().replace(/\s+/g, '-');

            const fixBranchUrl = (url) => url
              .replace(/\/git\/commits/, '/commit')
              .replace(/api.github.com\/repos/, 'github.com');

            const baseBranch = await github.rest.repos.getBranch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: '${{ inputs.base_branch }}'
            });

            const { repo, owner } = context.repo;
            let branchName = 'feature/aider-' + kebabCase(context.payload.issue.title || 'issue-${{ inputs.issue_number }}');
            let refName = `refs/heads/${branchName}`
            let refShortName = `heads/${branchName}`

            let counter = 1;
            let currentBranchBaseName = branchName;

            while (true) {
              const existingRef = await github.rest.git.getRef({
                owner,
                repo,
                ref: refShortName
              }).catch(() => null);

              if (!existingRef) {
                break;
              }

              console.log(`Branch ${branchName} already exists.`);

              counter++;
              const match = currentBranchBaseName.match(/_(\d+)$/);
              if (match) {
                currentBranchBaseName = currentBranchBaseName.replace(/_(\d+)$/, '');
              }
              branchName = `${currentBranchBaseName}_${String(counter).padStart(2, '0')}`;
              refName = `refs/heads/${branchName}`;
              refShortName = `heads/${branchName}`;
            }

            const result = await github.rest.git.createRef({
              owner,
              repo,
              ref: refName,
              sha: baseBranch.data.commit.sha
            });

            console.log(`Created branch ${branchName} with SHA ${result.data.object.sha}`);
            console.log(`Branch URL: ${fixBranchUrl(result.data.object.url)}`);

            return { ref: result.data.ref }

      - name: Get issue
        uses: actions/github-script@v7
        id: get_issue
        with:
          script: |
            console.log('Fetching issue #${{ inputs.issue_number }}')
            const { repo, owner } = context.repo;
            const result = await github.rest.issues.get({
              owner,
              repo,
              issue_number: ${{ inputs.issue_number }}
            });
            console.log(`Fetched issue #${result.data.number}: ${result.data.title}`)

            return { title: result.data.title, body: result.data.body, user: result.data.user.login };

      - name: Create prompt
        uses: actions/github-script@v7
        id: create_prompt
        with:
          result-encoding: string
          script: |
            const title = `${{ fromJson(steps.get_issue.outputs.result).title }}`;
            const body = `${{ fromJson(steps.get_issue.outputs.result).body }}`;

            const titleWithSingleQuotes = title.replace(/"/g, "'").replace(/`/g, '\\`');
            const bodyWithSingleQuotes = body.replace(/"/g, "'").replace(/`/g, '\\`');

            return `
              Here is the github issue detail user created
              Issue title: ${titleWithSingleQuotes}
              Issue description:
                ${bodyWithSingleQuotes}
            `;

      - name: Create requirements.txt
        run: echo "aider-chat" > requirements.txt
        shell: bash

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install dependencies
        run: |
          python -m pip install -r requirements.txt
        shell: bash

      - name: Prepare Git Environment
        run: |
          git fetch origin
          BRANCH_NAME=$(echo "${{ fromJson(steps.create_branch.outputs.result).ref }}" | sed 's#refs/heads/##')
          echo "Available branches after fetch:"
          git branch -r
          if git show-ref --verify --quiet "refs/remotes/origin/$BRANCH_NAME"; then
            echo "Checking out existing branch: $BRANCH_NAME"
            git checkout "$BRANCH_NAME"
          else
            echo "Branch $BRANCH_NAME not found, creating locally"
            git checkout -b "$BRANCH_NAME" "origin/${{ inputs.base_branch }}"
          fi
          git config user.name '${{ inputs.git_user_name }}'
          git config user.email "${{ inputs.git_user_email }}"
        shell: bash

      - name: Aider Planning Phase
        env:
          ${{ inputs.api_key_env_name }}: ${{ secrets.api_key_env_value }}
        run: |
          aider --yes \
            --chat-history-file /tmp/.aider.chat.history.md \
            --thinking-tokens 4k \
            --message "Include the following GitHub issue details at the beginning of ./plan.md: ${{ steps.create_prompt.outputs.result }}. \
              Then, create a detailed plan for implementing the requirements described in the issue. \
              DO NOT MAKE ANY CODE CHANGES. \
              Read all necessary files, analyze the requirements, and write the detailed plan to ./plan.md. \
              The plan must follow these rules: \
              1. Each step must modify only one file. \
              2. Each step must be prefixed with 'step <number>:' (e.g., 'step 1:'). \
              3. Organize changes to ensure the number of steps is less than 10. \
              Confirm the plan is saved to ./plan.md before exiting." \
            --model ${{ inputs.model }} \
            --weak-model ${{ inputs.weak_model }} ./plan.md
        timeout-minutes: ${{ inputs.chat_timeout }}
        shell: bash

      - name: Get Plan Content
        id: get_plan
        run: |
          if [ -f plan.md ]; then
            content=$(cat plan.md)
            echo "plan_content<<EOF" >> $GITHUB_OUTPUT
            echo "$content" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "plan_content=" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Aider Execution Phase
        env:
          ${{ inputs.api_key_env_name }}: ${{ secrets.api_key_env_value }}
        run: |
          # Extract steps from plan.md, expecting "step <number>: description"
          steps=$(grep -E "^step [0-9]+:" plan.md | sed -E 's/step [0-9]+: //')

          if [ -z "$steps" ]; then
            echo "No specific steps found in plan.md with the format 'step <number>:'. Attempting generic execution of the entire plan."
            aider --yes --restore-chat-history \
              --chat-history-file .aider.chat.history.md \
              --message "Based on the plan in plan.md, please execute the plan." \
              --model ${{ inputs.model }} \
              --weak-model ${{ inputs.weak_model }} ./plan.md
            sleep 1
          else
            OLDIFS=$IFS
            IFS=$'\n' # Process each step on a new line
            for step_description in $steps; do
              IFS=$OLDIFS
              echo "Executing step: $step_description"
              aider --yes --restore-chat-history \
                --chat-history-file .aider.chat.history.md \
                --message "Execute ONLY the following step from the plan: $step_description. Do not perform any other actions." \
                --model ${{ inputs.model }} \
                --weak-model ${{ inputs.weak_model }} ./plan.md
              sleep 1
            done
            IFS=$OLDIFS
          fi

          if [ -f "plan.md" ]; then
            echo "Removing plan.md"
            rm plan.md
            # Only attempt to git add/commit plan.md if it was previously tracked
            if git ls-files --error-unmatch plan.md > /dev/null 2>&1; then
              git add plan.md
              git commit -m "Remove plan.md after execution"
            else
              echo "plan.md was not tracked by git, so no need to commit its removal."
            fi
          fi
          BRANCH_NAME=$(echo "${{ fromJson(steps.create_branch.outputs.result).ref }}" | sed 's#refs/heads/##')
          git push origin "$BRANCH_NAME"
        timeout-minutes: ${{ inputs.chat_timeout }} # This timeout applies to the entire script execution
        shell: bash

      - name: Check Aider Reflection Limit
        id: check_reflection_limit
        run: |
          if [ -f .aider.chat.history.md ] && grep -q "Only 3 reflections allowed" .aider.chat.history.md; then
            echo "reflection_limit_reached=true" >> $GITHUB_OUTPUT
          else
            echo "reflection_limit_reached=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.custom_github_token }}
          script: |
            const { repo, owner } = context.repo;
            const branchRef = '${{ fromJson(steps.create_branch.outputs.result).ref }}'
            const title = '${{ fromJson(steps.get_issue.outputs.result).title }}'
            const issueCreator = '${{ fromJson(steps.get_issue.outputs.result).user }}'
            const planContent = `${{ steps.get_plan.outputs.plan_content }}`;
            const reflectionLimitReached = `${{ steps.check_reflection_limit.outputs.reflection_limit_reached == 'true' }}`;

            const pulls = await github.rest.pulls.list({
              owner,
              repo,
              state: 'open',
              per_page: 100
            });

            const existingPR = pulls.data.find((pr) => pr.head.ref === branchRef);
            if (existingPR) {
              console.log(`PR #${existingPR.number} already exists: ${existingPR.html_url}`);
              return existingPR;
            }

            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

            const prBodyParts = [
              'This PR is auto-generated by Aider Workflow.',
              '',
              `Fixes #${{ inputs.issue_number }}`,
              ''
            ];

            if (reflectionLimitReached === 'true') { // Ensure string comparison for boolean true
              prBodyParts.push('## ⚠️ Warning: Reflection Limit Reached ⚠️');
              prBodyParts.push('Aider reached its reflection limit ("Only 3 reflections allowed, stopping."). The generated plan and changes may be incomplete or suboptimal. Please review carefully.');
              prBodyParts.push('');
            }

            prBodyParts.push('## Plan:');
            prBodyParts.push(planContent);
            prBodyParts.push('');
            prBodyParts.push(`Workflow Run: [${context.runId}](${runUrl})`);

            const newPR = await github.rest.pulls.create({
              title, owner, repo, head: branchRef,
              base: 'refs/heads/${{ inputs.base_branch }}',
              body: prBodyParts.join('\n')
            });

            if (issueCreator) {
              try {
                await github.rest.pulls.requestReviewers({
                  owner,
                  repo,
                  pull_number: newPR.data.number,
                  reviewers: [issueCreator]
                });
                console.log(`Added ${issueCreator} as a reviewer to PR #${newPR.data.number}`);
              } catch (error) {
                console.error(`Failed to add reviewer ${issueCreator} to PR #${newPR.data.number}: ${error.message}`);
              }
            } else {
              console.log('Issue creator not found, skipping reviewer assignment.');
            }
            github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: newPR.data.number,
              labels: ['automated-pr']
            });

            console.log(`Created PR #${newPR.data.number}: ${newPR.data.html_url}`);
